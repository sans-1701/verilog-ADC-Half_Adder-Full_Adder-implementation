$date
	Sat Jul 31 22:18:56 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module FB_AddSub_tb $end
$var wire 4 ! S [3:0] $end
$var wire 1 " Cout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % Sub1 $end
$scope module UUT $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % Sub1 $end
$var wire 4 ( p [3:0] $end
$var wire 4 ) S [3:0] $end
$var wire 1 " Cout $end
$scope module F001 $end
$var wire 4 * A [3:0] $end
$var wire 4 + B [3:0] $end
$var wire 1 % Cin $end
$var wire 1 , p3 $end
$var wire 1 - p2 $end
$var wire 1 . p1 $end
$var wire 4 / S [3:0] $end
$var wire 1 " Cout $end
$scope module E1 $end
$var wire 1 . Cout $end
$var wire 1 0 S $end
$var wire 1 1 p1 $end
$var wire 1 2 q1 $end
$var wire 1 3 q2 $end
$var wire 1 4 x $end
$var wire 1 5 y $end
$var wire 1 " Cin $end
$upscope $end
$scope module E2 $end
$var wire 1 . Cin $end
$var wire 1 - Cout $end
$var wire 1 6 S $end
$var wire 1 7 p1 $end
$var wire 1 8 q1 $end
$var wire 1 9 q2 $end
$var wire 1 : x $end
$var wire 1 ; y $end
$upscope $end
$scope module E3 $end
$var wire 1 - Cin $end
$var wire 1 , Cout $end
$var wire 1 < S $end
$var wire 1 = p1 $end
$var wire 1 > q1 $end
$var wire 1 ? q2 $end
$var wire 1 @ x $end
$var wire 1 A y $end
$upscope $end
$scope module E4 $end
$var wire 1 , Cin $end
$var wire 1 " Cout $end
$var wire 1 B S $end
$var wire 1 C p1 $end
$var wire 1 D q1 $end
$var wire 1 E q2 $end
$var wire 1 F x $end
$var wire 1 G y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G
0F
0E
0D
0C
0B
1A
0@
0?
0>
1=
1<
0;
1:
09
08
17
16
05
14
03
02
11
10
b111 /
0.
0-
0,
b100 +
b11 *
b111 )
b11 (
b100 '
b11 &
0%
b100 $
b11 #
0"
b111 !
$end
#4
1"
1E
10
06
0<
1,
b1 !
b1 )
b1 /
0B
01
07
0=
1>
1C
04
0:
1@
1F
b1100 (
b1100 *
1%
#8
06
0.
0"
10
03
1<
0,
b101 !
b101 )
b101 /
0B
0E
11
1=
0>
0C
14
0@
0F
b1 (
b1 *
b1110 #
b1110 &
#12
b1101 !
b1101 )
b1101 /
1B
1C
1G
b1100 $
b1100 '
b1100 +
#16
